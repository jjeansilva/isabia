
// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that finds duplicate questions based on semantic meaning.
 *
 * - findDuplicateQuestions - A function that handles the duplicate detection process.
 * - FindDuplicateQuestionsInput - The input type for the findDuplicateQuestions function.
 * - FindDuplicateQuestionsOutput - The return type for the findDuplicateQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define a schema for a single question
const QuestionSchema = z.object({
  id: z.string(),
  enunciado: z.string(),
});

const FindDuplicateQuestionsInputSchema = z.object({
  questions: z.array(QuestionSchema).describe("An array of all questions to be checked for duplicates."),
});

export type FindDuplicateQuestionsInput = z.infer<
  typeof FindDuplicateQuestionsInputSchema
>;

const DuplicateGroupSchema = z.object({
    questionIds: z.array(z.string()).describe("An array of question IDs that are considered duplicates of each other."),
    reason: z.string().describe("A brief explanation of why these questions are considered duplicates.")
});

const FindDuplicateQuestionsOutputSchema = z.object({
  duplicateGroups: z.array(DuplicateGroupSchema).describe('An array of groups, where each group contains the IDs of duplicate questions.'),
});

export type FindDuplicateQuestionsOutput = z.infer<
  typeof FindDuplicateQuestionsOutputSchema
>;

export async function findDuplicateQuestions(
  input: FindDuplicateQuestionsInput
): Promise<FindDuplicateQuestionsOutput> {
  return findDuplicateQuestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'findDuplicateQuestionsPrompt',
  input: {schema: FindDuplicateQuestionsInputSchema},
  output: {schema: FindDuplicateQuestionsOutputSchema},
  prompt: `You are an AI assistant that helps manage a question bank for a study application.
Your task is to identify questions that are semantically duplicates of each other.

Analyze the following list of questions. Group them by semantic meaning. Questions that ask the same thing, even with different wording, should be considered duplicates.

For each group of duplicates you find, provide a list of their IDs and a brief reason why they are duplicates.

Questions:
{{#each questions}}
- ID: {{{id}}}, Enunciado: {{{enunciado}}}
{{/each}}

Respond with the list of duplicate groups. If no duplicates are found, return an empty array for duplicateGroups.`,
});

const findDuplicateQuestionsFlow = ai.defineFlow(
  {
    name: 'findDuplicateQuestionsFlow',
    inputSchema: FindDuplicateQuestionsInputSchema,
    outputSchema: FindDuplicateQuestionsOutputSchema,
  },
  async input => {
    // Ensure there are at least 2 questions to compare
    if (input.questions.length < 2) {
      return { duplicateGroups: [] };
    }
    
    const {output} = await prompt(input);
    return output!;
  }
);

