

// This file is generated by Firebase Studio.
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import { useQuery } from "@tanstack/react-query";
import { useData } from "@/hooks/use-data";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

import { DataTablePagination } from "./data-table-pagination"
import { DataTableToolbar } from "./data-table-toolbar"
import { Disciplina, Questao, Topico } from "@/types"
import { Skeleton } from "../ui/skeleton"
import { Card, CardContent } from "../ui/card"
import { getColumns } from "./questoes-columns";


interface DataTableProps {
  onEdit: (questao: Questao) => void;
}

export function QuestoesDataTable({ onEdit }: DataTableProps) {
  const dataSource = useData();
  const [rowSelection, setRowSelection] = React.useState({})
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({})
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [sorting, setSorting] = React.useState<SortingState>([])
  
  const { data: disciplinas, isLoading: isLoadingDisciplinas } = useQuery({
    queryKey: ['disciplinas'],
    queryFn: () => dataSource.list<Disciplina>('disciplinas_abcde1')
  });

  const { data: topicos, isLoading: isLoadingTopicos } = useQuery({
    queryKey: ['topicos'],
    queryFn: () => dataSource.list<Topico>('topicos_abcde1')
  });

  const { data: questoes, isLoading: isLoadingQuestoes } = useQuery({
      queryKey: ['questoes'],
      queryFn: async () => {
          return dataSource.list<Questao>('questoes_abcde1');
      },
  });

  const isLoading = isLoadingDisciplinas || isLoadingTopicos || isLoadingQuestoes;
  const data = questoes ?? [];

  const columns = React.useMemo(
    () => getColumns({
      onEdit,
      disciplinas: disciplinas ?? [],
      topicos: topicos ?? [],
    }),
    [onEdit, disciplinas, topicos]
  );

  const table = useReactTable({
    data,
    columns,
    state: {
      sorting,
      columnVisibility,
      rowSelection,
      columnFilters,
    },
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
  })

  return (
    <div className="space-y-4">
      <DataTableToolbar 
        table={table}
      />
      <Card>
        <CardContent className="p-0">
            <Table>
            <TableHeader>
                {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                    {headerGroup.headers.map((header) => {
                    return (
                        <TableHead key={header.id} colSpan={header.colSpan}>
                        {header.isPlaceholder
                            ? null
                            : flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                            )}
                        </TableHead>
                    )
                    })}
                </TableRow>
                ))}
            </TableHeader>
            <TableBody>
                {isLoading ? (
                    Array.from({ length: 10 }).map((_, i) => (
                        <TableRow key={i}>
                        <TableCell colSpan={columns.length} className="h-12 text-center">
                            <Skeleton className="h-6 w-full" />
                        </TableCell>
                        </TableRow>
                    ))
                ) : (
                    table.getRowModel().rows?.length ? (
                    table.getRowModel().rows.map((row) => (
                        <TableRow
                        key={row.id}
                        data-state={row.getIsSelected() && "selected"}
                        >
                        {row.getVisibleCells().map((cell) => (
                            <TableCell key={cell.id}>
                            {flexRender(
                                cell.column.columnDef.cell,
                                cell.getContext()
                            )}
                            </TableCell>
                        ))}
                        </TableRow>
                    ))
                    ) : (
                    <TableRow>
                        <TableCell
                        colSpan={columns.length}
                        className="h-24 text-center"
                        >
                        Nenhuma quest√£o encontrada.
                        </TableCell>
                    </TableRow>
                    )
                )}
            </TableBody>
            </Table>
        </CardContent>
      </Card>
      <DataTablePagination table={table} />
    </div>
  )
}
