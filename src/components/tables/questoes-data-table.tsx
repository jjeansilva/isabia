

// This file is generated by Firebase Studio.
"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from "@tanstack/react-table"
import { useMutation, useQueryClient } from "@tanstack/react-query"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

import { DataTablePagination } from "./data-table-pagination"
import { DataTableToolbar } from "./data-table-toolbar"
import { Disciplina, Questao, Topico } from "@/types"
import { Card, CardContent } from "../ui/card"
import { getColumns } from "./questoes-columns"
import { useData } from "@/hooks/use-data"
import { useToast } from "@/hooks/use-toast"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"

interface DataTableProps {
  questoes: Questao[];
  disciplinas: Disciplina[];
  topicos: Topico[];
  onEdit: (questao: Questao) => void;
}

export function QuestoesDataTable({ questoes, disciplinas, topicos, onEdit }: DataTableProps) {
  const queryClient = useQueryClient();
  const dataSource = useData();
  const { toast } = useToast();

  const [rowSelection, setRowSelection] = React.useState({})
  const [columnVisibility, setColumnVisibility] =
    React.useState<VisibilityState>({
        topicoId: false,
        dificuldade: false,
    })
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )
  const [sorting, setSorting] = React.useState<SortingState>([])

  const [questaoToDelete, setQuestaoToDelete] = React.useState<Questao | null>(null);

  const deleteMutation = useMutation({
    mutationFn: (id: string) => dataSource.delete('questoes_abcde1', id),
    onSuccess: () => {
      toast({ title: "Sucesso!", description: "Questão excluída." });
      queryClient.invalidateQueries({ queryKey: ["questoes"] });
    },
    onError: (error) => {
      toast({ variant: "destructive", title: "Erro!", description: error.message || "Não foi possível excluir a questão." });
    },
    onSettled: () => {
      setQuestaoToDelete(null);
    }
  });

  const columns = React.useMemo<ColumnDef<Questao>[]>(() => {
    const disciplinaMap = new Map(disciplinas.map(d => [d.id, d.nome]));
    const topicoMap = new Map(topicos.map(t => [t.id, t.nome]));

    const baseColumns = getColumns({
      onEdit,
      onDelete: (q) => setQuestaoToDelete(q),
    });
    
    // Customize cell renderers here
    return baseColumns.map(col => {
      if (col.id === 'disciplinaId' || col.accessorKey === 'disciplinaId') {
        return {
          ...col,
          cell: ({ row }) => disciplinaMap.get(row.getValue("disciplinaId")) || "N/A",
        };
      }
      if (col.id === 'topicoId' || col.accessorKey === 'topicoId') {
        return {
          ...col,
          cell: ({ row }) => topicoMap.get(row.getValue("topicoId")) || "N/A",
        };
      }
      return col;
    });

  }, [disciplinas, topicos, onEdit]);
  
  const table = useReactTable({
    data: questoes,
    columns,
    state: {
      sorting,
      columnVisibility,
      rowSelection,
      columnFilters,
    },
    enableRowSelection: true,
    onRowSelectionChange: setRowSelection,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
  })

  return (
    <div className="space-y-4">
      <DataTableToolbar 
        table={table}
        disciplinas={disciplinas}
        topicos={topicos}
      />
      <div className="rounded-lg border bg-card text-card-foreground">
        <CardContent className="p-0">
            <Table>
            <TableHeader>
                {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                    {headerGroup.headers.map((header) => {
                    return (
                        <TableHead key={header.id} colSpan={header.colSpan}>
                        {header.isPlaceholder
                            ? null
                            : flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                            )}
                        </TableHead>
                    )
                    })}
                </TableRow>
                ))}
            </TableHeader>
            <TableBody>
                {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                    <TableRow
                    key={row.id}
                    data-state={row.getIsSelected() && "selected"}
                    >
                    {row.getVisibleCells().map((cell) => (
                        <TableCell key={cell.id}>
                        {flexRender(
                            cell.column.columnDef.cell,
                            cell.getContext()
                        )}
                        </TableCell>
                    ))}
                    </TableRow>
                ))
                ) : (
                <TableRow>
                    <TableCell
                    colSpan={columns.length}
                    className="h-24 text-center"
                    >
                    Nenhuma questão encontrada.
                    </TableCell>
                </TableRow>
                )}
            </TableBody>
            </Table>
        </CardContent>
      </div>
      <DataTablePagination table={table} />

       <AlertDialog open={!!questaoToDelete} onOpenChange={(open) => !open && setQuestaoToDelete(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Excluir Questão?</AlertDialogTitle>
              <AlertDialogDescription>
                Tem certeza que deseja excluir a questão "{questaoToDelete?.enunciado.substring(0, 50)}..."? Esta ação não pode ser desfeita.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancelar</AlertDialogCancel>
              <AlertDialogAction onClick={() => questaoToDelete && deleteMutation.mutate(questaoToDelete.id)} disabled={deleteMutation.isPending}>
                {deleteMutation.isPending ? 'Excluindo...' : 'Sim, Excluir'}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
    </div>
  )
}
