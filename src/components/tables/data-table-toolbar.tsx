// This file is generated by Firebase Studio.
"use client"

import { Cross2Icon } from "@radix-ui/react-icons"
import { Table } from "@tanstack/react-table"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DataTableViewOptions } from "./data-table-view-options"

import { DataTableFacetedFilter } from "./data-table-faceted-filter"
import { Disciplina, QuestionDificuldade, Topico } from "@/types"


interface DataTableToolbarProps<TData> {
  table: Table<TData>
  disciplinas: Disciplina[]
  topicos: Topico[]
}

const dificuldades: { label: string, value: QuestionDificuldade }[] = [
    { label: "Fácil", value: "Fácil" },
    { label: "Médio", value: "Médio" },
    { label: "Difícil", value: "Difícil" },
]

export function DataTableToolbar<TData>({
  table,
  disciplinas,
  topicos,
}: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0

  const disciplinaOptions = React.useMemo(() => 
    disciplinas.map(d => ({ label: d.nome, value: d.id })),
    [disciplinas]
  )
  
  const disciplinaFilterValue = table.getColumn("disciplinaId")?.getFilterValue() as string[] | undefined;
  const topicoOptions = React.useMemo(() => {
    if (!disciplinaFilterValue || disciplinaFilterValue.length === 0) {
        return topicos.map(t => ({ label: t.nome, value: t.id }));
    }
    return topicos
        .filter(t => disciplinaFilterValue.includes(t.disciplinaId))
        .map(t => ({ label: t.nome, value: t.id }));

  }, [topicos, disciplinaFilterValue]);


  return (
    <div className="flex items-center justify-between">
      <div className="flex flex-1 items-center space-x-2">
        <Input
          placeholder="Filtrar por enunciado..."
          value={(table.getColumn("enunciado")?.getFilterValue() as string) ?? ""}
          onChange={(event) =>
            table.getColumn("enunciado")?.setFilterValue(event.target.value)
          }
          className="h-8 w-[150px] lg:w-[250px]"
        />
        {table.getColumn("disciplinaId") && (
          <DataTableFacetedFilter
            column={table.getColumn("disciplinaId")}
            title="Disciplina"
            options={disciplinaOptions}
          />
        )}
        {table.getColumn("topicoId") && (
          <DataTableFacetedFilter
            column={table.getColumn("topicoId")}
            title="Tópico"
            options={topicoOptions}
          />
        )}
        {table.getColumn("dificuldade") && (
          <DataTableFacetedFilter
            column={table.getColumn("dificuldade")}
            title="Dificuldade"
            options={dificuldades}
          />
        )}
        {isFiltered && (
          <Button
            variant="ghost"
            onClick={() => table.resetColumnFilters()}
            className="h-8 px-2 lg:px-3"
          >
            Resetar
            <Cross2Icon className="ml-2 h-4 w-4" />
          </Button>
        )}
      </div>
      <DataTableViewOptions table={table} />
    </div>
  )
}
