
// This file is generated by Firebase Studio.
"use client"

import { ColumnDef } from "@tanstack/react-table"
import { ArrowUpDown, MoreHorizontal, Edit, Trash2, Flag } from "lucide-react"
import React from 'react'
import { useMutation, useQueryClient } from "@tanstack/react-query"
import { useData } from "@/hooks/use-data"
import { useToast } from "@/hooks/use-toast"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { Checkbox } from "@/components/ui/checkbox"
import { Questao, Disciplina, Topico, QuestionDificuldade } from "@/types"
import { Badge } from "@/components/ui/badge"

const getDifficultyColor = (dificuldade: QuestionDificuldade) => {
    switch (dificuldade) {
      case 'Fácil': return 'bg-green-100 text-green-800 border-green-200';
      case 'Médio': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'Difícil': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-secondary';
    }
};

type GetColumnsProps = {
  onEdit: (questao: Questao) => void;
  onDelete: (questao: Questao) => void;
};


export const getColumns = ({ onEdit, onDelete }: GetColumnsProps): ColumnDef<Questao>[] => [
    {
        id: "select",
        header: ({ table }) => (
            <Checkbox
            checked={
                table.getIsAllPageRowsSelected() ||
                (table.getIsSomePageRowsSelected() && "indeterminate")
            }
            onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
            aria-label="Select all"
            />
        ),
        cell: ({ row }) => (
            <Checkbox
            checked={row.getIsSelected()}
            onCheckedChange={(value) => row.toggleSelected(!!value)}
            aria-label="Select row"
            />
        ),
        enableSorting: false,
        enableHiding: false,
    },
    {
        accessorKey: "enunciado",
        header: ({ column }) => {
            return (
            <Button
                variant="ghost"
                onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
            >
                Enunciado
                <ArrowUpDown className="ml-2 h-4 w-4" />
            </Button>
            )
        },
        cell: ({ row }) => {
            const questao: Questao = row.original;
            return (
                <div className="flex items-center gap-2">
                     {questao.necessitaRevisao && <Flag className="h-4 w-4 text-destructive shrink-0" title="Revisão necessária"/>}
                    <span className="truncate max-w-[150px] sm:max-w-xs md:max-w-sm">{row.getValue("enunciado")}</span>
                </div>
            )
        }
    },
    {
        accessorKey: "disciplinaId",
        header: "Disciplina",
        filterFn: (row, id, value) => {
            return value.includes(row.getValue(id))
        },
    },
    {
        accessorKey: "topicoId",
        header: "Tópico",
         filterFn: (row, id, value) => {
            return value.includes(row.getValue(id))
        },
    },
    {
        accessorKey: "dificuldade",
        header: "Dificuldade",
        cell: ({ row }) => {
            const dificuldade = row.getValue("dificuldade") as QuestionDificuldade
            return <Badge variant="outline" className={getDifficultyColor(dificuldade)}>{dificuldade}</Badge>
        },
        filterFn: (row, id, value) => {
            return value.includes(row.getValue(id))
        },
    },
    {
        id: "actions",
        enableHiding: false,
        cell: ({ row }) => {
            const questao = row.original
            return (
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="h-8 w-8 p-0">
                    <span className="sr-only">Open menu</span>
                    <MoreHorizontal className="h-4 w-4" />
                </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuLabel>Ações</DropdownMenuLabel>
                    <DropdownMenuItem onClick={() => onEdit(questao)}>
                        <Edit className="mr-2 h-4 w-4" />
                        Editar
                    </DropdownMenuItem>
                    <DropdownMenuSeparator />
                    <DropdownMenuItem className="text-destructive" onClick={() => onDelete(questao)}>
                         <Trash2 className="mr-2 h-4 w-4" />
                        Excluir
                    </DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>
            )
        },
    },
]
